x_nf <- vector(length = 39)#
#
for(i in 1:38) {#
	x_nf[1] <- 0#
	x_nf[i+1] <- 20*i	#
}#
#
var1_nf <- 'base'#
var2_nf <- '_' #
#
tempname_nf <- vector(length = 1)#
tempname2_nf <- vector(length = 1)#
IntervalFolder <- vector(length = 39)#
#
for (i in 1:29) {#
	tempname_nf <- toString(x[i])#
	tempname_2nf <- toString(x[i+10])#
	IntervalFolder[i] <- paste(var1_nf,tempname_nf,var2_nf,tempname_2nf, sep = '')#
}
x_nf <- vector(length = 39)#
#
for(i in 1:38) {#
	x_nf[1] <- 0#
	x_nf[i+1] <- 20*i	#
}#
#
var1_nf <- 'base'#
var2_nf <- '_' #
#
tempname_nf <- vector(length = 1)#
tempname2_nf <- vector(length = 1)#
IntervalFolder <- vector(length = 39)#
#
for (i in 1:29) {#
	tempname_nf <- toString(x_nf[i])#
	tempname_2nf <- toString(x_nf[i+10])#
	IntervalFolder[i] <- paste(var1_nf,tempname_nf,var2_nf,tempname_2nf, sep = '')#
}
IntervalFolder[2]
IntervalFolder[1]
IntervalFolder[2]
IntervalFolder[3]
IntervalFolder[10]
# Do_Neuron.r#
source -> s#
s("SETTINGS")#
#
# read in the matrix output generated by Matlab#
#
###################################################################
# Read TbT behavioral data#
s("Read_TbT.r")#
DATA_TbT.use <- DATA_TbT[DATA_TbT[,1] %in% UNITS_ALL.temp,]#
DATA_RT_TbT <- ReadRT_TbT(MONK,"RTMT_TbT_OT_inh","RT_withBoth") # for TbT#
#
if(AREA!="AMYG_OT_inj" & AREA!="DLPFC_OT_inj"){ #
   # Add in RT column#
   DATA_TbT.temp <- NULL#
   for(name in (unique(DATA_TbT[,1]))){#
      use <- (DATA_RT_TbT[,1])==name#
      use2 <- (DATA_TbT[,1])==name#
#
      DATA_TbT.temp <- rbind(DATA_TbT.temp, cbind(DATA_TbT[use2,],DATA_RT_TbT[use,2:(length(DATA_TbT[use2,1])+1)]))#
      }#
#
   DATA_TbT <- DATA_TbT.temp#
#
   colnames(DATA_TbT) <- c("units", "SELFboth", "BOTHself","OTHERnone","NONEother","CuedSELF","CuedOTHER","CuedBOTH","CuedNONE","RewardSize","RewardProp","FixatedOnM2", "FixatedOnM2delay","RT")#
}#
#
# Read in anatomical coords#
Coords <- GetCoords(AREA)#
# order it!!#
Coords<- Coords[order(Coords[,1]),]#
#
##################################################################
# Read in Neural Data # CHANGE FOR REWARD#
#
################################################ - NF#
x_nf <- vector(length = 39)#
#
for(i in 1:38) {#
	x_nf[1] <- 0#
	x_nf[i+1] <- 20*i	#
}#
#
var1_nf <- 'base'#
var2_nf <- '_' #
#
tempname_nf <- vector(length = 1)#
tempname2_nf <- vector(length = 1)#
IntervalFolder <- vector(length = 39)#
#
for (i in 1:29) {#
	tempname_nf <- toString(x_nf[i])#
	tempname_2nf <- toString(x_nf[i+10])#
	IntervalFolder[i] <- paste(var1_nf,tempname_nf,var2_nf,tempname_2nf, sep = '')#
}#
#
for(i in 1:29) {#
	Folder_use <- IntervalFolder[i]#
#
#Baseline <- ReadORP_Neural(UNITS_ALL.temp, "Baseline",TrialRangeStart,TrialRangeEnd)#
#colnames(Baseline) <- c("unit","MeanTbT")#
#if(length(DATA_TbT.use[,1])!=length(Baseline[,1]))#
#   stop("\n  1.Length doesn't match! \n")#
#
#Target <- ReadORP_Neural(UNITS_ALL.temp, "Target",TrialRangeStart,TrialRangeEnd)#
#colnames(Target) <- c("unit","MeanTbT")#
#if(length(DATA_TbT.use[,1])!=length(Target[,1]))#
#   stop("\n  2.Length doesn't match! \n")#
#
#TargetAcquire <- ReadORP_Neural(UNITS_ALL.temp, "TargetAcquire",TrialRangeStart,TrialRangeEnd)#
#colnames(TargetAcquire) <- c("unit","MeanTbT")#
#if(length(DATA_TbT.use[,1])!=length(TargetAcquire[,1]))#
#   stop("\n  3.Length doesn't match! \n")#
#
#Reward <- ReadORP_Neural(UNITS_ALL.temp, "Reward",TrialRangeStart,TrialRangeEnd)#
#colnames(Reward) <- c("unit","MeanTbT")#
#if(length(DATA_TbT.use[,1])!=length(Reward[,1]))#
#   stop("\n  4.Length doesn't match! \n")#
#
############## - this this#
Base_SPcount <- ReadORP_Neural_special(UNITS_ALL.temp, "Base_SPcount",TrialRangeStart,TrialRangeEnd,Folder_use)#
colnames(Base_SPcount) <- c("unit","CountTbT")#
if(length(DATA_TbT.use[,1])!=length(Base_SPcount[,1]))#
   stop("\n  5.Length doesn't match! \n")#
#
#MagCue_SPcount <- ReadORP_Neural(UNITS_ALL.temp, "MagCue_SPcount",TrialRangeStart,TrialRangeEnd)#
#colnames(MagCue_SPcount) <- c("unit","CountTbT")#
#if(length(DATA_TbT.use[,1])!=length(MagCue_SPcount[,1]))#
#   stop("\n  6.Length doesn't match! \n")#
#
#Target_SPcount <- ReadORP_Neural(UNITS_ALL.temp, "Target_SPcount",TrialRangeStart,TrialRangeEnd)#
#colnames(Target_SPcount) <- c("unit","CountTbT")#
#if(length(DATA_TbT.use[,1])!=length(Target_SPcount[,1]))#
#   stop("\n  7.Length doesn't match! \n")#
#
#TargetAcquire_SPcount <- ReadORP_Neural(UNITS_ALL.temp, "TargetAcquire_SPcount",TrialRangeStart,TrialRangeEnd)#
#colnames(TargetAcquire_SPcount) <- c("unit","CountTbT")#
#if(length(DATA_TbT.use[,1])!=length(TargetAcquire_SPcount[,1]))#
#   stop("\n  8.Length doesn't match! \n")#
#
############## - this this#
#Reward_SPcount <- ReadORP_Neural_special(UNITS_ALL.temp, "Reward_SPcount",TrialRangeStart,TrialRangeEnd,Folder_use)#
#colnames(Reward_SPcount) <- c("unit","CountTbT")#
#if(length(DATA_TbT.use[,1])!=length(Reward_SPcount[,1]))#
#   stop("\n  9.Length doesn't match! \n")#
#
#FixM2_SPcount <- ReadORP_Neural(UNITS_ALL.temp, "FixationOnM2_SPcount",TrialRangeStart,TrialRangeEnd)#
#colnames(FixM2_SPcount) <- c("unit","CountTbT")#
#if(length(DATA_TbT.use[,1])!=length(Reward_SPcount[,1]))#
#   stop("\n  10 doesn't match! \n")#
##################################################################
##################################################################
#FixM2 <- ReadORP_Neural_special(UNITS_ALL.temp, "FixatedOnM2",TrialRangeStart,TrialRangeEnd,Folder_use)#
#colnames(FixM2) <- c("unit","MeanTbT")#
#
#FixM2delay <- ReadORP_Neural_special(UNITS_ALL.temp, "FixatedOnM2_rewarddelay",TrialRangeStart,TrialRangeEnd,Folder_use)#
#colnames(FixM2delay) <- c("unit","MeanTbT")#
#
#FixM2_Prior <- ReadORP_Neural_special(UNITS_ALL.temp, "FixatedOnM2_Prior",TrialRangeStart,TrialRangeEnd,Folder_use)#
#colnames(FixM2_Prior) <- c("unit","MeanTbT")#
#
#FixM2delay_Prior <- ReadORP_Neural_special(UNITS_ALL.temp, #"FixatedOnM2_rewarddelay_Prior",TrialRangeStart,TrialRangeEnd,Folder_use)#
#colnames(FixM2delay_Prior) <- c("unit","MeanTbT")#
#
##################################################################
##################################################################
#Error <- ReadORP_Neural_special(UNITS_ALL.temp,"Error",TrialRangeStart,TrialRangeEnd,Folder_use)#
#colnames(Error) <- c("unit","MeanTbT")#
#ErrorRwdContext <- ReadORP_Neural_special(UNITS_ALL.temp,"ErrorRwdType",TrialRangeStart,TrialRangeEnd,Folder_use)#
#
#SUMMARY_TbT_Err <- cbind(Error,ErrorRwdContext[,2])#
#colnames(SUMMARY_TbT_Err) <- c("unit","MeanTbT","RwdContext") # use 'trial' to match RwdType#
#SUMMARY_TbT_Err[SUMMARY_TbT_Err[,"RwdContext"]==1 | SUMMARY_TbT_Err[,"RwdContext"]==2,"RwdContext"] <- 1 #SelfOther#
#SUMMARY_TbT_Err[SUMMARY_TbT_Err[,"RwdContext"]==3 | SUMMARY_TbT_Err[,"RwdContext"]==4,"RwdContext"] <- 2 #OtherNone#
#SUMMARY_TbT_Err[SUMMARY_TbT_Err[,"RwdContext"]==5 | SUMMARY_TbT_Err[,"RwdContext"]==6,"RwdContext"] <- 3 #SelfNone#
#SUMMARY_TbT_Err[SUMMARY_TbT_Err[,"RwdContext"]==7,"RwdContext"] <- 4 #Selfcue#
#SUMMARY_TbT_Err[SUMMARY_TbT_Err[,"RwdContext"]==8,"RwdContext"] <- 5 #Othercue#
#SUMMARY_TbT_Err[SUMMARY_TbT_Err[,"RwdContext"]==9,"RwdContext"] <- 6 #Nonecue#
#
# Error is a special case#
#SUMMARY_Err <- NULL#
#for(h in UNITS_ALL.temp){#
#   use <- Error[,1]==h#
#   error_temp <- mean(Error[use,"MeanTbT"])#
#   sem_temp <- SEMf(Error[use,"MeanTbT"])#
#   n_temp <- length(Error[use,"MeanTbT"])#
#
#   SUMMARY_Err<- rbind(SUMMARY_Err, cbind(h,error_temp,sem_temp,n_temp))#
#   }#
#colnames(SUMMARY_Err) <- c("unit","MeanTbT","SEM","N")#
#ERROR <- cbind(Error,ErrorRwdContext[,2])#
#colnames(ERROR) <- c("unit","Err sps","Err type")#
#
#rm(Error,ErrorRwdContext)#
##################################################################
##################################################################
##################################################################
##################################################################
#
usefor <- substr(as.numeric(UNITS_ALL.temp),6,6)==2 #
MagCue <- ReadORP_Neural_special(UNITS_ALL.temp[usefor], "MagCue",TrialRangeStart,TrialRangeEnd,Folder_use)#
colnames(MagCue) <- c("unit","MeanTbT")#
#
if(length(DATA_TbT.use[substr(DATA_TbT.use[,1],6,6)==2,1])!=length(MagCue[,1]))#
   stop("\n  5.Length doesn't match! \n")#
##################################################################
##################################################################
##################################################################
# Now match behavioral data and make a SUMMARY#
#SUM.neural <- cbind(Baseline[,2],Target[,2],TargetAcquire[,2],Reward[,2],MagCue[,2])#
SUM.neural_SPcount_base <- cbind(Base_SPcount[,2])#
#SUM.neural_SPcount_magcue <- cbind(MagCue_SPcount[,2])#
#SUM.neural_SPcount_target <- cbind(Target_SPcount[,2])#
#SUM.neural_SPcount_targetacquire <- cbind(TargetAcquire_SPcount[,2])#
#SUM.neural_SPcount_reward <- cbind(Reward_SPcount[,2])#
###################################################################
#
# Now combine and organize#
SUMMARY_TbT <- cbind(DATA_TbT.use, SUM.neural)
var1_nf <- 'rwd'#
var2_nf <- '_' #
end_val <- 0#
start_val <- -300#
wdw_size <- 20#
calc <- ((end_val+abs(start_val))/wdw_size)#
x_nf <- vector(length = calc)#
y_nf <- '/'#
#
for (i in 1:(calc+1)) {#
	x_nf[1] <- start_val#
	x_nf[i+1] <- start_val + wdw_size*i	#
}#
#
x_nf = abs(x_nf)#
#
tempname_nf <- vector(length = 1)#
tempname2_nf <- vector(length = 1)#
IntervalFolder <- vector(length = length(calc-1))#
#
for (i in 1:calc-9) {#
	tempname_nf <- toString(x_nf[i])#
	tempname_2nf <- toString(x_nf[i+10])#
	IntervalFolder[i] <- paste(var1_nf,tempname_nf,var2_nf,tempname_2nf,y_nf, sep = '')#
}
IntervalFolder
var1_nf <- 'rwd'#
var2_nf <- '_' #
end_val <- 180#
start_val <- -300#
wdw_size <- 20#
calc <- ((end_val+abs(start_val))/wdw_size)#
x_nf <- vector(length = calc)#
y_nf <- '/'#
#
for (i in 1:(calc+1)) {#
	x_nf[1] <- start_val#
	x_nf[i+1] <- start_val + wdw_size*i	#
}#
#
x_nf = abs(x_nf)#
#
tempname_nf <- vector(length = 1)#
tempname2_nf <- vector(length = 1)#
IntervalFolder <- vector(length = length(calc-1))#
#
for (i in 1:calc-9) {#
	tempname_nf <- toString(x_nf[i])#
	tempname_2nf <- toString(x_nf[i+10])#
	IntervalFolder[i] <- paste(var1_nf,tempname_nf,var2_nf,tempname_2nf,y_nf, sep = '')#
}
IntervalFolder
x_nf <- vector(length = 39)#
#
for(i in 1:38) {#
	x_nf[1] <- 0#
	x_nf[i+1] <- 20*i	#
}#
#
var1_nf <- 'base'#
var2_nf <- '_' #
#
tempname_nf <- vector(length = 1)#
tempname2_nf <- vector(length = 1)#
IntervalFolder <- vector(length = 39)#
#
for (i in 1:29) {#
	tempname_nf <- toString(x[i])#
	tempname_2nf <- toString(x[i+10])#
	IntervalFolder[i] <- paste(var1_nf,tempname_nf,var2_nf,tempname_2nf, sep = '')#
}
ls
q()
main(k){float i,j,r,x,y=-16;while(puts(""),y++<15)for(x =0;x++<84;putchar(" .:-;!/>)|&IH%*#"[k&15]))for(i=k=r=0; j=r*r-i*i-2+x/25,i=2*r*i+y/10,j*j+i*i<11&&k++<111;r=j);}
main(k) {float i,j,r,x,y=-16;while(puts(""),y++<15)for(x =0;x++<84;putchar(" .:-;!/>)|&IH%*#"[k&15]))for(i=k=r=0; j=r*r-i*i-2+x/25,i=2*r*i+y/10,j*j+i*i<11&&k++<111;r=j);}
{float i,j,r,x,y=-16;while(puts(""),y++<15)for(x =0;x++<84;putchar(" .:-;!/>)|&IH%*#"[k&15]))for(i=k=r=0; j=r*r-i*i-2+x/25,i=2*r*i+y/10,j*j+i*i<11&&k++<111;r=j);}
watched_pars <- c("beta", "mu", "tau", "Sigma", "nu", "genbeta")
watched_pars
help 'c'
help c
help('c')
help('library')
parameters {#
  vector[P] beta_raw[U];  // N(0, 1) versions of params#
  vector[P] mu;  // mean of population baseline#
  vector<lower=0>[P] tau;  // scale of population baseline#
  cholesky_factor_corr[P] L;  // Cholesky factor for covariance matrix#
  real<lower=1> nu;  // degrees of freedom for parameter t#
}
help('list')
var x <- 10
x <- 10
x
rm(x)
x <- list(Outcome = 10#
U = 11#
N = 20)
x <- list(Outcome = 10,#
U = 11,#
N = 20)
x
d <- x$Outcome
d
x <- list(Outcome = 10,#
	U = 11,#
	N = 20)#
y <- 11
y
x$U
x <- [10,11,12]
x <- c(10,11,12)
x
d <- dim(x)[2]
d
d <- dim(x)[1]
dd
d
x
help(size)
help(dim)
dim(x)
nrow(x)
x
ncol(x)
x
rmx
rm(x)
x[1] <- 10
x <- 10
x[2] <- 10
x[3] <- 11
d <- dim(x)[2]
d
d <- dim(x)[1]
d
x
x[2]
x[3]
x = c(10,11,12)
x[2]
x = list(N <- 10, D <- 12)
x$N
x
rmx
rm(x)
x = list(N <- 10, D <- 12)
x$N
x
x <- list(N = 10, D = 12)
x$N
nls
clc
a <- 5
a
a[0]
a[1]
a[2]
a[3]
a[4]
b =
a
b
a
list(a=10,b=11)
c <- list(a=10, b=11)
c
c.a
c[a]
c['a']
c['b']
setwd('/Volumes/My Passport/NICK/Chang Lab 2016/repositories/court/function/model/r')
tmp_path <- '/Volumes/My Passport/NICK/Chang Lab 2016/repositories/court/function/model/r/tmp'
travel_time <- 1
binned <- data.matrix( read.csv('tmp__binned.csv', header=FALSE) )#
prob_matrix2 <- data.matrix( read.csv('tmp__p_leave_pdf.csv', header=FALSE))#
#
#prob <- read.csv('tmp__p_leave_pdf.csv')#
#prob_matrix2 <- data.matrix(prob)#
#prob_matrix2 <- c(0, prob_matrix2)#
#
time <- seq(0, length(prob_matrix2)-1)#
data <- data.frame(time, prob_matrix2, binned)#
#
anon <- prob_matrix2 ~ binned / (1+k*travel_time)#
w <- nls(anon, start=list(k=.01), data=data,trace=FALSE, control=list(maxiter=500))
binned <- data.matrix( read.csv('tmp__binned.csv', header=FALSE) )#
prob_matrix2 <- data.matrix( read.csv('tmp__p_leave_pdf.csv', header=FALSE))
setwd( tmp_path )
binned <- data.matrix( read.csv('tmp__binned.csv', header=FALSE) )#
prob_matrix2 <- data.matrix( read.csv('tmp__p_leave_pdf.csv', header=FALSE))#
#
#prob <- read.csv('tmp__p_leave_pdf.csv')#
#prob_matrix2 <- data.matrix(prob)#
#prob_matrix2 <- c(0, prob_matrix2)#
#
time <- seq(0, length(prob_matrix2)-1)#
data <- data.frame(time, prob_matrix2, binned)#
#
anon <- prob_matrix2 ~ binned / (1+k*travel_time)#
w <- nls(anon, start=list(k=.01), data=data,trace=FALSE, control=list(maxiter=500))
binned <- data.matrix( read.csv('tmp__binned.csv', header=FALSE) )#
prob_matrix2 <- data.matrix( read.csv('tmp__p_leave_pdf.csv', header=FALSE))#
#
#prob <- read.csv('tmp__p_leave_pdf.csv')#
#prob_matrix2 <- data.matrix(prob)#
#prob_matrix2 <- c(0, prob_matrix2)#
#
time <- seq(0, length(prob_matrix2)-1)#
data <- data.frame(time, prob_matrix2, binned)
data
travel_time
anon <- prob_matrix2 ~ binned / (1+k*travel_time)
w <- nls(anon, start=list(k=.01), data=data,trace=FALSE, control=list(maxiter=500))
aic = AIC(w)
aic
summary(w)
summary(w)
data.matrix(summary(logLik(w))[1])[1]
summary(w)$error
summary(w)$residuals
RMSE(w)
sum(residuals)
resid <- summary(w)$residuals
resid
sum(resid)
sum(resid^2)
sum(resid^2/length(resid))
length(resid)
(resid^2)/length(resid)
b <- (resid^2)/length(resid)
b
sum(b)
resids <- summary(w)$residuals
resids
rmse <- sum( (resids^2 / length(resids)) )
rmse
